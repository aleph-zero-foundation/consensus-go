// Package tcoin implements a threshold coin for generating sequences of random bytes.
//
// This is the main component of all the random sources we use in the algorithm.
package tcoin

import (
	"gitlab.com/alephledger/consensus-go/pkg/crypto/encrypt"
	"gitlab.com/alephledger/validator-skeleton/pkg/crypto/bn256"
)

// GlobalThresholdCoin is a threshold coin generated by a dealer.
// It contains raw secret keys of all processes.
type GlobalThresholdCoin struct {
	threshold uint16
	globalVK  *bn256.VerificationKey
	vks       []*bn256.VerificationKey
	sks       []*bn256.SecretKey
}

// ThresholdCoin is a threshold coin owned by one of the parties.
// It contains encrypted secretKeys of other parties
// and decrypted key of the owner.
type ThresholdCoin struct {
	owner     uint16
	dealer    uint16
	threshold uint16
	globalVK  *bn256.VerificationKey
	vks       []*bn256.VerificationKey
	encSKs    []encrypt.CipherText
	sk        *bn256.SecretKey
}

// CoinShare is a share of the coin owned by a process.
type CoinShare struct {
	owner uint16
	sgn   *bn256.Signature
}

// Coin is a result of merging CoinShares.
type Coin struct {
	sgn *bn256.Signature
}

// Threshold returns the threshold of the given ThresholdCoin.
func (tc *ThresholdCoin) Threshold() uint16 {
	return tc.threshold
}
